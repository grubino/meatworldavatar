package com.kramerica.meatworldavatar;

import java.util.List;
import com.kramerica.meatworldavatar.meatdomain.DaoSession;
import de.greenrobot.dao.DaoException;

import com.kramerica.meatworldavatar.meatdomain.EventDao;
import com.kramerica.meatworldavatar.meatdomain.HabitDao;
import com.kramerica.meatworldavatar.meatdomain.RelevanceDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table RELEVANCE.
 */
public class Relevance {

    private Long id;
    private Long eventId;
    private Long habitId;
    private Long avatarId;
    private Float habitRelevance;
    private Float eventRelevance;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RelevanceDao myDao;

    private List<Event> eventList;
    private List<Habit> habitList;

    public Relevance() {
    }

    public Relevance(Long id) {
        this.id = id;
    }

    public Relevance(Long id, Long eventId, Long habitId, Long avatarId, Float habitRelevance, Float eventRelevance) {
        this.id = id;
        this.eventId = eventId;
        this.habitId = habitId;
        this.avatarId = avatarId;
        this.habitRelevance = habitRelevance;
        this.eventRelevance = eventRelevance;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRelevanceDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getEventId() {
        return eventId;
    }

    public void setEventId(Long eventId) {
        this.eventId = eventId;
    }

    public Long getHabitId() {
        return habitId;
    }

    public void setHabitId(Long habitId) {
        this.habitId = habitId;
    }

    public Long getAvatarId() {
        return avatarId;
    }

    public void setAvatarId(Long avatarId) {
        this.avatarId = avatarId;
    }

    public Float getHabitRelevance() {
        return habitRelevance;
    }

    public void setHabitRelevance(Float habitRelevance) {
        this.habitRelevance = habitRelevance;
    }

    public Float getEventRelevance() {
        return eventRelevance;
    }

    public void setEventRelevance(Float eventRelevance) {
        this.eventRelevance = eventRelevance;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Event> getEventList() {
        if (eventList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EventDao targetDao = daoSession.getEventDao();
            List<Event> eventListNew = targetDao._queryRelevance_EventList(id);
            synchronized (this) {
                if(eventList == null) {
                    eventList = eventListNew;
                }
            }
        }
        return eventList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEventList() {
        eventList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Habit> getHabitList() {
        if (habitList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HabitDao targetDao = daoSession.getHabitDao();
            List<Habit> habitListNew = targetDao._queryRelevance_HabitList(id);
            synchronized (this) {
                if(habitList == null) {
                    habitList = habitListNew;
                }
            }
        }
        return habitList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetHabitList() {
        habitList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
