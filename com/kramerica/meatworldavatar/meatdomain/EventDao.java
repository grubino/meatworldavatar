package com.kramerica.meatworldavatar.meatdomain;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.kramerica.meatworldavatar.Event;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EVENT.
*/
public class EventDao extends AbstractDao<Event, Long> {

    public static final String TABLENAME = "EVENT";

    /**
     * Properties of entity Event.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AvatarId = new Property(1, Long.class, "avatarId", false, "AVATAR_ID");
        public final static Property Time = new Property(2, java.util.Date.class, "time", false, "TIME");
        public final static Property Sensor_type = new Property(3, Integer.class, "sensor_type", false, "SENSOR_TYPE");
        public final static Property EventId = new Property(4, Long.class, "eventId", false, "EVENT_ID");
    };

    private DaoSession daoSession;

    private Query<Event> relevance_EventListQuery;
    private Query<Event> avatar_EventListQuery;

    public EventDao(DaoConfig config) {
        super(config);
    }
    
    public EventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EVENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'AVATAR_ID' INTEGER," + // 1: avatarId
                "'TIME' INTEGER," + // 2: time
                "'SENSOR_TYPE' INTEGER," + // 3: sensor_type
                "'EVENT_ID' INTEGER);"); // 4: eventId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EVENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Event entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long avatarId = entity.getAvatarId();
        if (avatarId != null) {
            stmt.bindLong(2, avatarId);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time.getTime());
        }
 
        Integer sensor_type = entity.getSensor_type();
        if (sensor_type != null) {
            stmt.bindLong(4, sensor_type);
        }
    }

    @Override
    protected void attachEntity(Event entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Event readEntity(Cursor cursor, int offset) {
        Event entity = new Event( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // avatarId
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // time
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // sensor_type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Event entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAvatarId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setSensor_type(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Event entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Event entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "eventList" to-many relationship of Relevance. */
    public List<Event> _queryRelevance_EventList(Long eventId) {
        synchronized (this) {
            if (relevance_EventListQuery == null) {
                QueryBuilder<Event> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EventId.eq(null));
                relevance_EventListQuery = queryBuilder.build();
            }
        }
        Query<Event> query = relevance_EventListQuery.forCurrentThread();
        query.setParameter(0, eventId);
        return query.list();
    }

    /** Internal query to resolve the "eventList" to-many relationship of Avatar. */
    public List<Event> _queryAvatar_EventList(Long avatarId) {
        synchronized (this) {
            if (avatar_EventListQuery == null) {
                QueryBuilder<Event> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AvatarId.eq(null));
                avatar_EventListQuery = queryBuilder.build();
            }
        }
        Query<Event> query = avatar_EventListQuery.forCurrentThread();
        query.setParameter(0, avatarId);
        return query.list();
    }

}
