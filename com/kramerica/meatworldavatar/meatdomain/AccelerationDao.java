package com.kramerica.meatworldavatar.meatdomain;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.kramerica.meatworldavatar.Acceleration;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ACCELERATION.
*/
public class AccelerationDao extends AbstractDao<Acceleration, Long> {

    public static final String TABLENAME = "ACCELERATION";

    /**
     * Properties of entity Acceleration.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Timestamp = new Property(1, java.util.Date.class, "timestamp", false, "TIMESTAMP");
        public final static Property X = new Property(2, Float.class, "x", false, "X");
        public final static Property Y = new Property(3, Float.class, "y", false, "Y");
        public final static Property Z = new Property(4, Float.class, "z", false, "Z");
        public final static Property EventId = new Property(5, Long.class, "eventId", false, "EVENT_ID");
    };

    private Query<Acceleration> event_AccelerationListQuery;

    public AccelerationDao(DaoConfig config) {
        super(config);
    }
    
    public AccelerationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ACCELERATION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TIMESTAMP' INTEGER," + // 1: timestamp
                "'X' REAL," + // 2: x
                "'Y' REAL," + // 3: y
                "'Z' REAL," + // 4: z
                "'EVENT_ID' INTEGER);"); // 5: eventId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "accelTime ON ACCELERATION" +
                " (TIMESTAMP);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ACCELERATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Acceleration entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(2, timestamp.getTime());
        }
 
        Float x = entity.getX();
        if (x != null) {
            stmt.bindDouble(3, x);
        }
 
        Float y = entity.getY();
        if (y != null) {
            stmt.bindDouble(4, y);
        }
 
        Float z = entity.getZ();
        if (z != null) {
            stmt.bindDouble(5, z);
        }
 
        Long eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindLong(6, eventId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Acceleration readEntity(Cursor cursor, int offset) {
        Acceleration entity = new Acceleration( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // timestamp
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // x
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // y
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // z
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // eventId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Acceleration entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimestamp(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setX(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setY(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setZ(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setEventId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Acceleration entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Acceleration entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "accelerationList" to-many relationship of Event. */
    public List<Acceleration> _queryEvent_AccelerationList(Long eventId) {
        synchronized (this) {
            if (event_AccelerationListQuery == null) {
                QueryBuilder<Acceleration> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EventId.eq(null));
                event_AccelerationListQuery = queryBuilder.build();
            }
        }
        Query<Acceleration> query = event_AccelerationListQuery.forCurrentThread();
        query.setParameter(0, eventId);
        return query.list();
    }

}
