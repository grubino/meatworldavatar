package com.kramerica.meatworldavatar.meatdomain;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kramerica.meatworldavatar.Avatar;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table AVATAR.
*/
public class AvatarDao extends AbstractDao<Avatar, Long> {

    public static final String TABLENAME = "AVATAR";

    /**
     * Properties of entity Avatar.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Birthday = new Property(1, java.util.Date.class, "birthday", false, "BIRTHDAY");
        public final static Property Height = new Property(2, Float.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(3, Float.class, "weight", false, "WEIGHT");
        public final static Property Gender = new Property(4, Byte.class, "gender", false, "GENDER");
    };

    private DaoSession daoSession;


    public AvatarDao(DaoConfig config) {
        super(config);
    }
    
    public AvatarDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'AVATAR' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BIRTHDAY' INTEGER," + // 1: birthday
                "'HEIGHT' REAL," + // 2: height
                "'WEIGHT' REAL," + // 3: weight
                "'GENDER' INTEGER);"); // 4: gender
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AVATAR'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Avatar entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(2, birthday.getTime());
        }
 
        Float height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(3, height);
        }
 
        Float weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(4, weight);
        }
 
        Byte gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(5, gender);
        }
    }

    @Override
    protected void attachEntity(Avatar entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Avatar readEntity(Cursor cursor, int offset) {
        Avatar entity = new Avatar( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // birthday
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // height
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // weight
            cursor.isNull(offset + 4) ? null : (byte) cursor.getShort(offset + 4) // gender
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Avatar entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBirthday(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setHeight(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setWeight(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setGender(cursor.isNull(offset + 4) ? null : (byte) cursor.getShort(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Avatar entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Avatar entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
