package com.kramerica.meatworldavatar.meatdomain;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.kramerica.meatworldavatar.Habit;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HABIT.
*/
public class HabitDao extends AbstractDao<Habit, Long> {

    public static final String TABLENAME = "HABIT";

    /**
     * Properties of entity Habit.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AvatarId = new Property(1, long.class, "avatarId", false, "AVATAR_ID");
        public final static Property Hour = new Property(2, Integer.class, "hour", false, "HOUR");
        public final static Property Weekday = new Property(3, Integer.class, "weekday", false, "WEEKDAY");
        public final static Property Month = new Property(4, Integer.class, "month", false, "MONTH");
        public final static Property DayOfMonth = new Property(5, Integer.class, "dayOfMonth", false, "DAY_OF_MONTH");
        public final static Property DayOfYear = new Property(6, Integer.class, "dayOfYear", false, "DAY_OF_YEAR");
        public final static Property HabitId = new Property(7, Long.class, "habitId", false, "HABIT_ID");
    };

    private Query<Habit> relevance_HabitListQuery;
    private Query<Habit> avatar_HabitListQuery;

    public HabitDao(DaoConfig config) {
        super(config);
    }
    
    public HabitDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HABIT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'AVATAR_ID' INTEGER NOT NULL ," + // 1: avatarId
                "'HOUR' INTEGER," + // 2: hour
                "'WEEKDAY' INTEGER," + // 3: weekday
                "'MONTH' INTEGER," + // 4: month
                "'DAY_OF_MONTH' INTEGER," + // 5: dayOfMonth
                "'DAY_OF_YEAR' INTEGER," + // 6: dayOfYear
                "'HABIT_ID' INTEGER);"); // 7: habitId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HABIT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Habit entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAvatarId());
 
        Integer hour = entity.getHour();
        if (hour != null) {
            stmt.bindLong(3, hour);
        }
 
        Integer weekday = entity.getWeekday();
        if (weekday != null) {
            stmt.bindLong(4, weekday);
        }
 
        Integer month = entity.getMonth();
        if (month != null) {
            stmt.bindLong(5, month);
        }
 
        Integer dayOfMonth = entity.getDayOfMonth();
        if (dayOfMonth != null) {
            stmt.bindLong(6, dayOfMonth);
        }
 
        Integer dayOfYear = entity.getDayOfYear();
        if (dayOfYear != null) {
            stmt.bindLong(7, dayOfYear);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Habit readEntity(Cursor cursor, int offset) {
        Habit entity = new Habit( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // avatarId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // hour
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // weekday
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // month
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // dayOfMonth
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // dayOfYear
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Habit entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAvatarId(cursor.getLong(offset + 1));
        entity.setHour(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setWeekday(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMonth(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDayOfMonth(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDayOfYear(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Habit entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Habit entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "habitList" to-many relationship of Relevance. */
    public List<Habit> _queryRelevance_HabitList(Long habitId) {
        synchronized (this) {
            if (relevance_HabitListQuery == null) {
                QueryBuilder<Habit> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.HabitId.eq(null));
                relevance_HabitListQuery = queryBuilder.build();
            }
        }
        Query<Habit> query = relevance_HabitListQuery.forCurrentThread();
        query.setParameter(0, habitId);
        return query.list();
    }

    /** Internal query to resolve the "habitList" to-many relationship of Avatar. */
    public List<Habit> _queryAvatar_HabitList(long avatarId) {
        synchronized (this) {
            if (avatar_HabitListQuery == null) {
                QueryBuilder<Habit> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AvatarId.eq(null));
                avatar_HabitListQuery = queryBuilder.build();
            }
        }
        Query<Habit> query = avatar_HabitListQuery.forCurrentThread();
        query.setParameter(0, avatarId);
        return query.list();
    }

}
