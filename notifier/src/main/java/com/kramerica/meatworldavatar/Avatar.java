package com.kramerica.meatworldavatar;

import java.util.List;
import com.kramerica.meatworldavatar.meatdomain.DaoSession;
import de.greenrobot.dao.DaoException;

import com.kramerica.meatworldavatar.meatdomain.AvatarDao;
import com.kramerica.meatworldavatar.meatdomain.HabitDao;
import com.kramerica.meatworldavatar.meatdomain.RelevanceDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table AVATAR.
 */
public class Avatar {

    private Long id;
    private java.util.Date birthday;
    private Float height;
    private Float weight;
    private Byte gender;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AvatarDao myDao;

    private List<Habit> habitList;
    private List<Relevance> relevanceList;

    public Avatar() {
    }

    public Avatar(Long id) {
        this.id = id;
    }

    public Avatar(Long id, java.util.Date birthday, Float height, Float weight, Byte gender) {
        this.id = id;
        this.birthday = birthday;
        this.height = height;
        this.weight = weight;
        this.gender = gender;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAvatarDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getBirthday() {
        return birthday;
    }

    public void setBirthday(java.util.Date birthday) {
        this.birthday = birthday;
    }

    public Float getHeight() {
        return height;
    }

    public void setHeight(Float height) {
        this.height = height;
    }

    public Float getWeight() {
        return weight;
    }

    public void setWeight(Float weight) {
        this.weight = weight;
    }

    public Byte getGender() {
        return gender;
    }

    public void setGender(Byte gender) {
        this.gender = gender;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Habit> getHabitList() {
        if (habitList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HabitDao targetDao = daoSession.getHabitDao();
            List<Habit> habitListNew = targetDao._queryAvatar_HabitList(id);
            synchronized (this) {
                if(habitList == null) {
                    habitList = habitListNew;
                }
            }
        }
        return habitList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetHabitList() {
        habitList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Relevance> getRelevanceList() {
        if (relevanceList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RelevanceDao targetDao = daoSession.getRelevanceDao();
            List<Relevance> relevanceListNew = targetDao._queryAvatar_RelevanceList(id);
            synchronized (this) {
                if(relevanceList == null) {
                    relevanceList = relevanceListNew;
                }
            }
        }
        return relevanceList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRelevanceList() {
        relevanceList = null;
    }

    /** Convenient call for {\link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {\link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {\link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
